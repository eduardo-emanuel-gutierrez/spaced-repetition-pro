/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source, please visit the github repository of this
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const VIEW_TYPE_SPACED_REPETITION = 'spaced-repetition-view';
class SpacedRepetitionView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.currentState = 'filter';
        this.reviewQueue = [];
        this.currentReviewIndex = 0;
        this.currentFilters = [];
        this.plugin = plugin;
        this.component = new obsidian.Component();
    }
    getViewType() {
        return VIEW_TYPE_SPACED_REPETITION;
    }
    getDisplayText() {
        return 'Spaced Repetition';
    }
    getIcon() {
        return 'clock';
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            this.renderView();
        });
    }
    onClose() {
        return __awaiter(this, void 0, void 0, function* () {
            this.component.unload();
        });
    }
    renderView() {
        return __awaiter(this, void 0, void 0, function* () {
            const container = this.containerEl.children[1];
            container.empty();
            switch (this.currentState) {
                case 'filter':
                    yield this.renderFilterView(container);
                    break;
                case 'question':
                    yield this.renderQuestionView(container);
                    break;
                case 'answer':
                    yield this.renderAnswerView(container);
                    break;
                case 'empty':
                    this.renderEmptyView(container);
                    break;
            }
        });
    }
    handleSpacebar() {
        if (this.currentState === 'question') {
            this.currentState = 'answer';
            this.renderView();
        }
        else if (this.currentState === 'answer') {
            this.handleRating('good');
        }
    }
    renderFilterView(container) {
        return __awaiter(this, void 0, void 0, function* () {
            const filterContainer = container.createDiv({ cls: 'sr-filter-view' });
            filterContainer.createEl('h2', { text: 'Filter Review' });
            const allProperties = yield this.getAllProperties();
            if (allProperties.length === 0) {
                filterContainer.createEl('p', {
                    text: 'No properties found',
                    cls: 'sr-no-properties'
                });
            }
            else {
                const filterControls = filterContainer.createDiv({ cls: 'sr-filter-controls' });
                const propertyDropdown = new obsidian.DropdownComponent(filterControls);
                propertyDropdown.addOption('', 'Select property');
                allProperties.forEach(prop => {
                    propertyDropdown.addOption(prop, prop);
                });
                const valueDropdown = new obsidian.DropdownComponent(filterControls);
                valueDropdown.addOption('', 'Select value');
                propertyDropdown.onChange((property) => __awaiter(this, void 0, void 0, function* () {
                    valueDropdown.selectEl.empty();
                    valueDropdown.addOption('', 'Select value');
                    if (property) {
                        const values = yield this.getPropertyValues(property);
                        values.forEach(value => {
                            valueDropdown.addOption(value, value);
                        });
                    }
                }));
                let connectorDropdown = null;
                if (this.currentFilters.length > 0) {
                    const connectorContainer = filterControls.createDiv({ cls: 'sr-filter-connector-container' });
                    connectorContainer.createSpan({ text: 'Add with:', cls: 'sr-connector-label' });
                    connectorDropdown = new obsidian.DropdownComponent(connectorContainer);
                    connectorDropdown.addOption('AND', 'AND');
                    connectorDropdown.addOption('OR', 'OR');
                    connectorDropdown.setValue('AND');
                }
                new obsidian.ButtonComponent(filterControls)
                    .setButtonText('Add Filter')
                    .onClick(() => {
                    const property = propertyDropdown.getValue();
                    const value = valueDropdown.getValue();
                    const connector = connectorDropdown ? connectorDropdown.getValue() : 'AND';
                    if (property && value) {
                        this.currentFilters.push({ property, value, connector });
                        this.renderView();
                    }
                });
            }
            if (this.currentFilters.length > 0) {
                const filtersDisplay = filterContainer.createDiv({ cls: 'sr-current-filters' });
                filtersDisplay.createEl('h3', { text: 'Current Filters:' });
                this.currentFilters.forEach((filter, index) => {
                    const filterItem = filtersDisplay.createDiv({ cls: 'sr-filter-item' });
                    const removeBtn = filterItem.createEl('button', {
                        text: '×',
                        cls: 'sr-remove-filter'
                    });
                    removeBtn.onclick = () => {
                        this.currentFilters.splice(index, 1);
                        this.renderView();
                    };
                    if (index === 0) {
                        filterItem.createSpan({ text: `${filter.property} = ${filter.value}` });
                    }
                    else {
                        filterItem.createSpan({
                            text: ` ${filter.connector} ${filter.property} = ${filter.value}`,
                            cls: 'sr-filter-connector-text'
                        });
                    }
                });
            }
            const stats = filterContainer.createDiv({ cls: 'sr-stats' });
            const totalItems = this.plugin.srManager.getTrackedNotes().length;
            const filteredItems = yield this.getFilteredItems();
            const dailyInfo = this.plugin.srManager.getDailyLimitInfo();
            stats.createEl('p', { text: `Total items: ${totalItems}` });
            stats.createEl('p', { text: `Filtered items: ${filteredItems.length}` });
            if (dailyInfo.limit === -1) {
                stats.createEl('p', { text: 'Daily limit: Unlimited new cards' });
            }
            else {
                const limitText = `Daily limit: ${dailyInfo.used}/${dailyInfo.limit} new cards reviewed today`;
                const limitEl = stats.createEl('p', { text: limitText });
                if (dailyInfo.remaining === 0) {
                    limitEl.classList.add('sr-limit-error');
                }
                else if (dailyInfo.remaining <= 3 && dailyInfo.limit > 5) {
                    limitEl.classList.add('sr-limit-warning');
                }
                if (dailyInfo.remaining > 0) {
                    stats.createEl('p', {
                        text: `Remaining new cards today: ${dailyInfo.remaining}`,
                        cls: 'sr-remaining-cards'
                    });
                }
            }
            const newInFiltered = filteredItems.filter(item => item.isNew).length;
            if (newInFiltered > 0) {
                const newCardsText = `New cards in filtered results: ${newInFiltered}`;
                const newCardsEl = stats.createEl('p', { text: newCardsText });
                if (dailyInfo.limit !== -1 && newInFiltered > dailyInfo.remaining) {
                    newCardsEl.classList.add('sr-new-cards-warning');
                    stats.createEl('p', {
                        text: `⚠️ Only ${dailyInfo.remaining} of these new cards will be available today`,
                        cls: 'sr-warning-text'
                    });
                }
            }
            const actions = filterContainer.createDiv({ cls: 'sr-actions' });
            new obsidian.ButtonComponent(actions)
                .setButtonText('Apply Filters')
                .setCta()
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                yield this.applyFilters();
            }));
            new obsidian.ButtonComponent(actions)
                .setButtonText('Clear Filters')
                .onClick(() => {
                this.currentFilters = [];
                this.renderView();
            });
            const startBtn = new obsidian.ButtonComponent(actions)
                .setButtonText('Start Review')
                .setCta()
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                yield this.startReview();
            }));
            if (filteredItems.length === 0 && this.currentFilters.length > 0) {
                startBtn.setDisabled(true);
                startBtn.setTooltip('No notes match the current filters');
            }
            else if (filteredItems.length === 0) {
                startBtn.setDisabled(true);
                startBtn.setTooltip('No notes due for review');
            }
        });
    }
    renderQuestionView(container) {
        return __awaiter(this, void 0, void 0, function* () {
            const questionContainer = container.createDiv({ cls: 'sr-question-view' });
            if (this.reviewQueue.length === 0 || this.currentReviewIndex >= this.reviewQueue.length) {
                this.currentState = 'empty';
                this.renderView();
                return;
            }
            const currentItem = this.reviewQueue[this.currentReviewIndex];
            const abstractFile = this.app.vault.getAbstractFileByPath(currentItem.path);
            if (!(abstractFile instanceof obsidian.TFile)) {
                this.currentReviewIndex++;
                this.renderView();
                return;
            }
            const file = abstractFile;
            questionContainer.createEl('h1', { text: file.basename, cls: 'sr-question-title' });
            const buttonsContainer = questionContainer.createDiv({ cls: 'sr-buttons' });
            new obsidian.ButtonComponent(buttonsContainer)
                .setButtonText('Show Answer')
                .setCta()
                .onClick(() => {
                this.currentState = 'answer';
                this.renderView();
            });
            new obsidian.ButtonComponent(buttonsContainer)
                .setButtonText('Open File')
                .setIcon('external-link')
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                yield this.app.workspace.getLeaf('tab').openFile(file);
            }));
            questionContainer.createEl('p', {
                text: 'Press Spacebar to show answer',
                cls: 'sr-shortcut-hint'
            });
            const progress = questionContainer.createDiv({ cls: 'sr-progress' });
            progress.createEl('p', {
                text: `${this.currentReviewIndex + 1} / ${this.reviewQueue.length}`,
                cls: 'sr-progress-text'
            });
        });
    }
    renderAnswerView(container) {
        return __awaiter(this, void 0, void 0, function* () {
            const answerContainer = container.createDiv({ cls: 'sr-answer-view' });
            if (this.reviewQueue.length === 0 || this.currentReviewIndex >= this.reviewQueue.length) {
                this.currentState = 'empty';
                this.renderView();
                return;
            }
            const currentItem = this.reviewQueue[this.currentReviewIndex];
            const abstractFile = this.app.vault.getAbstractFileByPath(currentItem.path);
            if (!(abstractFile instanceof obsidian.TFile)) {
                this.currentReviewIndex++;
                this.renderView();
                return;
            }
            const file = abstractFile;
            answerContainer.createEl('h1', { text: file.basename, cls: 'sr-answer-title' });
            const contentContainer = answerContainer.createDiv({ cls: 'sr-content' });
            const content = yield this.app.vault.read(file);
            yield obsidian.MarkdownRenderer.renderMarkdown(content, contentContainer, file.path, this.component);
            const ratingContainer = answerContainer.createDiv({ cls: 'sr-rating-buttons' });
            ratingContainer.createEl('h3', { text: 'How well did you remember?' });
            const buttonsRow = ratingContainer.createDiv({ cls: 'sr-buttons-row' });
            new obsidian.ButtonComponent(buttonsRow)
                .setButtonText('Again (1)')
                .setClass('sr-rating-again')
                .onClick(() => this.handleRating('again'));
            new obsidian.ButtonComponent(buttonsRow)
                .setButtonText('Hard (2)')
                .setClass('sr-rating-hard')
                .onClick(() => this.handleRating('hard'));
            new obsidian.ButtonComponent(buttonsRow)
                .setButtonText('Good (3)')
                .setClass('sr-rating-good')
                .onClick(() => this.handleRating('good'));
            new obsidian.ButtonComponent(buttonsRow)
                .setButtonText('Easy (4)')
                .setClass('sr-rating-easy')
                .onClick(() => this.handleRating('easy'));
            const actionsContainer = answerContainer.createDiv({ cls: 'sr-actions' });
            new obsidian.ButtonComponent(actionsContainer)
                .setButtonText('Open File')
                .setIcon('external-link')
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                yield this.app.workspace.getLeaf('tab').openFile(file);
            }));
            const progress = answerContainer.createDiv({ cls: 'sr-progress' });
            progress.createEl('p', {
                text: `${this.currentReviewIndex + 1} / ${this.reviewQueue.length}`,
                cls: 'sr-progress-text'
            });
        });
    }
    renderEmptyView(container) {
        const emptyContainer = container.createDiv({ cls: 'sr-empty-view' });
        const iconContainer = emptyContainer.createDiv({ cls: 'sr-empty-icon' });
        obsidian.setIcon(iconContainer, 'check-circle');
        emptyContainer.createEl('h2', { text: 'No more notes to review' });
        emptyContainer.createEl('p', {
            text: 'You have completed all notes scheduled for today. Great work!'
        });
        const actionsContainer = emptyContainer.createDiv({ cls: 'sr-actions' });
        new obsidian.ButtonComponent(actionsContainer)
            .setButtonText('Back to Filters')
            .setCta()
            .onClick(() => {
            this.currentState = 'filter';
            this.currentFilters = [];
            this.renderView();
        });
    }
    handleRating(rating) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.currentState !== 'answer') {
                return;
            }
            const currentItem = this.reviewQueue[this.currentReviewIndex];
            yield this.plugin.srManager.updateNoteReview(currentItem.path, rating);
            if (rating === 'again') {
                const reviewAgain = Object.assign({}, currentItem);
                this.reviewQueue.push(reviewAgain);
            }
            this.currentReviewIndex++;
            if (this.currentReviewIndex >= this.reviewQueue.length) {
                const allDueNotes = this.plugin.srManager.getDueNotes();
                const remainingDueNotes = allDueNotes.filter(note => !this.reviewQueue.some(queuedNote => queuedNote.path === note.path));
                if (remainingDueNotes.length > 0) {
                    this.currentState = 'filter';
                    this.reviewQueue = [];
                    new obsidian.Notice('More notes available. Adjust filters to continue.');
                }
                else {
                    this.currentState = 'empty';
                    this.reviewQueue = [];
                }
            }
            else {
                this.currentState = 'question';
            }
            yield this.renderView();
        });
    }
    hasUntrackedDueNotes(allDueNotes) {
        if (this.reviewQueue.length === 0) {
            return allDueNotes.length > 0;
        }
        const queuePaths = new Set(this.reviewQueue.map(item => item.path));
        return allDueNotes.some(note => !queuePaths.has(note.path));
    }
    getAllProperties() {
        return __awaiter(this, void 0, void 0, function* () {
            const properties = new Set();
            const trackedNotes = this.plugin.srManager.getTrackedNotes();
            for (const note of trackedNotes) {
                const abstractFile = this.app.vault.getAbstractFileByPath(note.path);
                if (abstractFile instanceof obsidian.TFile) {
                    const cache = this.app.metadataCache.getFileCache(abstractFile);
                    if (cache === null || cache === void 0 ? void 0 : cache.frontmatter) {
                        Object.keys(cache.frontmatter).forEach(key => properties.add(key));
                    }
                }
            }
            return Array.from(properties).sort();
        });
    }
    getPropertyValues(property) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const values = new Set();
            const trackedNotes = this.plugin.srManager.getTrackedNotes();
            for (const note of trackedNotes) {
                const abstractFile = this.app.vault.getAbstractFileByPath(note.path);
                if (abstractFile instanceof obsidian.TFile) {
                    const cache = this.app.metadataCache.getFileCache(abstractFile);
                    if ((_a = cache === null || cache === void 0 ? void 0 : cache.frontmatter) === null || _a === void 0 ? void 0 : _a[property]) {
                        const value = cache.frontmatter[property];
                        if (Array.isArray(value)) {
                            value.forEach(v => {
                                if (v !== undefined && v !== null) {
                                    values.add(String(v));
                                }
                            });
                        }
                        else if (typeof value === 'string' || typeof value === 'number') {
                            values.add(String(value));
                        }
                    }
                }
            }
            return Array.from(values).sort();
        });
    }
    getFilteredItems() {
        return __awaiter(this, void 0, void 0, function* () {
            let items = this.plugin.srManager.getDueNotes();
            if (this.currentFilters.length === 0) {
                return items;
            }
            const filteredItems = [];
            for (const item of items) {
                const abstractFile = this.app.vault.getAbstractFileByPath(item.path);
                if (!(abstractFile instanceof obsidian.TFile))
                    continue;
                const cache = this.app.metadataCache.getFileCache(abstractFile);
                if (!(cache === null || cache === void 0 ? void 0 : cache.frontmatter))
                    continue;
                let currentResult = true;
                for (let i = 0; i < this.currentFilters.length; i++) {
                    const filter = this.currentFilters[i];
                    const propValue = cache.frontmatter[filter.property];
                    let matches = false;
                    if (Array.isArray(propValue)) {
                        matches = propValue.includes(filter.value);
                    }
                    else if (propValue !== undefined && propValue !== null) {
                        matches = String(propValue) === filter.value;
                    }
                    if (i === 0) {
                        currentResult = matches;
                    }
                    else {
                        if (filter.connector === 'AND') {
                            currentResult = currentResult && matches;
                        }
                        else {
                            currentResult = currentResult || matches;
                        }
                    }
                    if (filter.connector === 'AND' && !currentResult) {
                        break;
                    }
                }
                if (currentResult) {
                    filteredItems.push(item);
                }
            }
            return filteredItems;
        });
    }
    applyFilters() {
        return __awaiter(this, void 0, void 0, function* () {
            this.reviewQueue = yield this.getFilteredItems();
            if (this.reviewQueue.length === 0) {
                new obsidian.Notice('No notes match the current filters', 3000);
            }
            else {
                new obsidian.Notice(`Filtered to ${this.reviewQueue.length} items`);
            }
        });
    }
    startReview() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.reviewQueue.length === 0) {
                this.reviewQueue = this.plugin.srManager.getDueNotes();
            }
            if (this.reviewQueue.length === 0) {
                if (this.currentFilters.length > 0) {
                    new obsidian.Notice('No notes match the applied filters. Clear filters or adjust criteria', 4000);
                }
                else {
                    new obsidian.Notice('No notes due for review', 3000);
                }
                this.currentState = 'empty';
            }
            else {
                this.currentReviewIndex = 0;
                this.currentState = 'question';
                new obsidian.Notice(`Starting review session with ${this.reviewQueue.length} notes`);
            }
            yield this.renderView();
        });
    }
}

class SpacedRepetitionManager {
    constructor(plugin) {
        this.reviewItems = new Map();
        this.lastResetDate = '';
        this.newCardsReviewedToday = 0;
        this.plugin = plugin;
        this.dataFilePath = this.plugin.settings.dataLocation || 'spaced-repetition-data.json';
    }
    initializeDailyData() {
        const today = new Date().toDateString();
        this.lastResetDate = today;
        this.newCardsReviewedToday = 0;
    }
    checkDailyReset() {
        const today = new Date().toDateString();
        if (this.lastResetDate !== today) {
            this.lastResetDate = today;
            this.newCardsReviewedToday = 0;
        }
    }
    loadData() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const adapter = this.plugin.app.vault.adapter;
                if (yield adapter.exists(this.dataFilePath)) {
                    const content = yield adapter.read(this.dataFilePath);
                    if (content && content.trim()) {
                        const data = JSON.parse(content);
                        this.reviewItems.clear();
                        for (const item of data.items || []) {
                            this.reviewItems.set(item.path, item);
                        }
                        this.lastResetDate = data.lastResetDate || '';
                        this.newCardsReviewedToday = data.newCardsReviewedToday || 0;
                        this.checkDailyReset();
                        new obsidian.Notice(`Loaded ${this.reviewItems.size} review items`);
                    }
                    else {
                        this.reviewItems.clear();
                        this.initializeDailyData();
                        yield this.saveData();
                    }
                }
                else {
                    this.reviewItems.clear();
                    this.initializeDailyData();
                    yield this.saveData();
                    new obsidian.Notice('Created new spaced repetition data file');
                }
            }
            catch (error) {
                console.error('Error loading spaced repetition data:', error);
                this.reviewItems.clear();
                this.initializeDailyData();
                try {
                    yield this.saveData();
                }
                catch (saveError) {
                    console.error('Error creating data file:', saveError);
                }
            }
        });
    }
    saveData() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = {
                    version: 1,
                    items: Array.from(this.reviewItems.values()),
                    lastResetDate: this.lastResetDate,
                    newCardsReviewedToday: this.newCardsReviewedToday
                };
                const jsonContent = JSON.stringify(data, null, 2);
                const adapter = this.plugin.app.vault.adapter;
                yield adapter.write(this.dataFilePath, jsonContent);
            }
            catch (error) {
                console.error('Error saving spaced repetition data:', error);
                throw error;
            }
        });
    }
    isNoteTracked(file) {
        return this.reviewItems.has(file.path);
    }
    trackNote(file) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.reviewItems.has(file.path)) {
                return;
            }
            const now = Date.now();
            const newItem = {
                path: file.path,
                interval: 1,
                easeFactor: 2.5,
                repetitions: 0,
                nextReviewDate: now,
                isNew: true
            };
            this.reviewItems.set(file.path, newItem);
            try {
                yield this.saveData();
            }
            catch (error) {
                this.reviewItems.delete(file.path);
                console.error(`Failed to track note ${file.path}:`, error);
                throw error;
            }
        });
    }
    untrackNote(file) {
        const wasTracked = this.reviewItems.delete(file.path);
        if (wasTracked) {
            this.saveData().catch((error) => {
                console.error(`Failed to save after untracking ${file.path}:`, error);
            });
        }
        return wasTracked;
    }
    getTrackedNotes() {
        return Array.from(this.reviewItems.values());
    }
    getDueNotes() {
        this.checkDailyReset();
        const now = Date.now();
        const maxNewPerDay = this.plugin.settings.newCardsPerDay;
        const dueItems = [];
        let newCardsInQueue = 0;
        for (const item of this.reviewItems.values()) {
            if (item.isNew) {
                if (maxNewPerDay === -1 || this.newCardsReviewedToday + newCardsInQueue < maxNewPerDay) {
                    dueItems.push(item);
                    newCardsInQueue++;
                }
            }
            else {
                if (item.nextReviewDate <= now) {
                    dueItems.push(item);
                }
            }
        }
        return dueItems.sort((a, b) => {
            if (a.interval !== b.interval) {
                return a.interval - b.interval;
            }
            return a.nextReviewDate - b.nextReviewDate;
        });
    }
    updateNoteReview(path, rating) {
        return __awaiter(this, void 0, void 0, function* () {
            const item = this.reviewItems.get(path);
            if (!item)
                return;
            const wasNewCard = item.isNew;
            const qualityMap = {
                'again': 0,
                'hard': 2,
                'good': 3,
                'easy': 5
            };
            const quality = qualityMap[rating];
            const result = this.calculateSM2(quality, item.repetitions, item.easeFactor, item.interval);
            const now = Date.now();
            item.easeFactor = result.easeFactor;
            item.repetitions = result.repetitions;
            item.interval = result.interval;
            item.lastReviewDate = now;
            item.nextReviewDate = now + (result.interval * 24 * 60 * 60 * 1000);
            item.isNew = false;
            if (wasNewCard) {
                this.checkDailyReset();
                this.newCardsReviewedToday++;
            }
            if (rating === 'again') {
                item.repetitions = 0;
                item.interval = 0.0104;
                item.nextReviewDate = now + (15 * 60 * 1000);
            }
            try {
                yield this.saveData();
            }
            catch (error) {
                console.error(`Failed to save review update for ${path}:`, error);
                throw error;
            }
        });
    }
    getDailyLimitInfo() {
        this.checkDailyReset();
        const limit = this.plugin.settings.newCardsPerDay;
        const remaining = limit === -1 ? -1 : Math.max(0, limit - this.newCardsReviewedToday);
        return {
            used: this.newCardsReviewedToday,
            limit: limit,
            remaining: remaining
        };
    }
    calculateSM2(quality, repetitions, easeFactor, interval) {
        if (quality < 3) {
            return {
                interval: 1,
                repetitions: 0,
                easeFactor: easeFactor
            };
        }
        let newEaseFactor = easeFactor + (0.1 - (5 - quality) * (0.08 + (5 - quality) * 0.02));
        if (newEaseFactor < 1.3) {
            newEaseFactor = 1.3;
        }
        const newRepetitions = repetitions + 1;
        let newInterval;
        if (newRepetitions === 1) {
            newInterval = 1;
        }
        else if (newRepetitions === 2) {
            newInterval = 6;
        }
        else {
            newInterval = interval * newEaseFactor;
        }
        if (quality === 5) {
            newInterval *= 1.3;
        }
        else if (quality === 2) {
            newInterval *= 0.6;
        }
        if (newInterval < 1) {
            newInterval = 1;
        }
        if (newInterval > 365) {
            newInterval = 365;
        }
        return {
            interval: Math.round(newInterval * 100) / 100,
            repetitions: newRepetitions,
            easeFactor: Math.round(newEaseFactor * 100) / 100
        };
    }
    getStatistics() {
        const now = Date.now();
        let due = 0;
        let newCards = 0;
        let learning = 0;
        let review = 0;
        for (const item of this.reviewItems.values()) {
            if (item.isNew) {
                newCards++;
            }
            else if (item.repetitions === 0 || item.interval < 1) {
                learning++;
            }
            else {
                review++;
            }
            if (item.nextReviewDate <= now) {
                due++;
            }
        }
        return {
            total: this.reviewItems.size,
            due,
            new: newCards,
            learning,
            review
        };
    }
    cleanupDeletedNotes() {
        return __awaiter(this, void 0, void 0, function* () {
            let cleaned = 0;
            const adapter = this.plugin.app.vault.adapter;
            const pathsToDelete = [];
            for (const [path, _] of this.reviewItems) {
                try {
                    const exists = yield adapter.exists(path);
                    if (!exists) {
                        pathsToDelete.push(path);
                    }
                }
                catch (error) {
                    console.error(`Error checking existence of ${path}:`, error);
                    pathsToDelete.push(path);
                }
            }
            for (const path of pathsToDelete) {
                this.reviewItems.delete(path);
                cleaned++;
            }
            if (cleaned > 0) {
                try {
                    yield this.saveData();
                }
                catch (error) {
                    console.error('Error saving after cleanup:', error);
                    throw error;
                }
            }
            return cleaned;
        });
    }
}

const DEFAULT_SETTINGS = {
    newCardsPerDay: 20,
    dataLocation: 'spaced-repetition-data.json'
};
class SpacedRepetitionSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Spaced Repetition Pro Settings' });
        containerEl.createEl('p', {
            text: 'Configure your spaced repetition learning preferences.',
            cls: 'setting-item-description'
        });
        new obsidian.Setting(containerEl)
            .setName('New cards per day')
            .setDesc('Maximum number of new notes to introduce per day (1-1000).')
            .addText(text => text
            .setPlaceholder('20')
            .setValue(String(this.plugin.settings.newCardsPerDay))
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            const num = parseInt(value);
            if (!isNaN(num) && num > 0 && num <= 1000) {
                this.plugin.settings.newCardsPerDay = num;
                yield this.plugin.saveSettings();
                text.inputEl.classList.remove('sr-input-error');
            }
            else {
                text.inputEl.classList.add('sr-input-error');
                setTimeout(() => {
                    text.inputEl.classList.remove('sr-input-error');
                }, 2000);
            }
        })));
        new obsidian.Setting(containerEl)
            .setName('Data file location')
            .setDesc('Path to the JSON file where review data is stored. Must end with .json')
            .addText(text => text
            .setPlaceholder('spaced-repetition-data.json')
            .setValue(this.plugin.settings.dataLocation)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            if (value.endsWith('.json') && !value.includes('..') && !value.startsWith('/')) {
                this.plugin.settings.dataLocation = value;
                yield this.plugin.saveSettings();
                this.plugin.srManager.loadData();
                text.inputEl.classList.remove('sr-input-error');
            }
            else {
                text.inputEl.classList.add('sr-input-error');
                setTimeout(() => {
                    text.inputEl.classList.remove('sr-input-error');
                }, 2000);
            }
        })));
        containerEl.createEl('h3', { text: 'Statistics' });
        const statsContainer = containerEl.createDiv({ cls: 'sr-stats-container' });
        const stats = this.plugin.srManager.getStatistics();
        new obsidian.Setting(statsContainer)
            .setName('Total tracked notes')
            .setDesc(`${stats.total} notes are currently being tracked for review`);
        new obsidian.Setting(statsContainer)
            .setName('Due for review')
            .setDesc(`${stats.due} notes are due for review right now`);
        new obsidian.Setting(statsContainer)
            .setName('New notes')
            .setDesc(`${stats.new} notes haven't been reviewed yet`);
        new obsidian.Setting(statsContainer)
            .setName('Learning notes')
            .setDesc(`${stats.learning} notes are in the learning phase`);
        new obsidian.Setting(statsContainer)
            .setName('Review notes')
            .setDesc(`${stats.review} notes are in the long-term review phase`);
        containerEl.createEl('h3', { text: 'Maintenance' });
        new obsidian.Setting(containerEl)
            .setName('Clean up deleted notes')
            .setDesc('Remove tracked notes that no longer exist in your vault')
            .addButton(button => button
            .setButtonText('Clean up')
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            const cleaned = yield this.plugin.srManager.cleanupDeletedNotes();
            if (cleaned > 0) {
                this.display();
                new obsidian.Notice(`Cleaned up ${cleaned} deleted note${cleaned > 1 ? 's' : ''}`);
            }
            else {
                new obsidian.Notice('No deleted notes found');
            }
        })));
        containerEl.createEl('h3', { text: 'Keyboard Shortcuts' });
        const shortcutsInfo = containerEl.createDiv({ cls: 'sr-shortcuts-info' });
        shortcutsInfo.createEl('p', { text: 'During review sessions, you can use these shortcuts:' });
        const shortcutsList = shortcutsInfo.createEl('ul');
        shortcutsList.createEl('li', { text: 'Spacebar - Show answer / Mark as "Good"' });
        shortcutsList.createEl('li', { text: '1 - Rate as "Again" (forgot completely)' });
        shortcutsList.createEl('li', { text: '2 - Rate as "Hard" (difficult but remembered)' });
        shortcutsList.createEl('li', { text: '3 - Rate as "Good" (remembered with effort)' });
        shortcutsList.createEl('li', { text: '4 - Rate as "Easy" (remembered perfectly)' });
        containerEl.createEl('h3', { text: 'About' });
        const aboutContainer = containerEl.createDiv({ cls: 'sr-about' });
        aboutContainer.createEl('p', {
            text: 'Spaced Repetition Pro uses the SM-2 algorithm (SuperMemo 2) to calculate optimal review intervals for your notes.'
        });
        aboutContainer.createEl('p', {
            text: 'The algorithm adapts to your performance, showing difficult notes more frequently and easy ones less often.'
        });
        const docsLink = aboutContainer.createEl('p');
        docsLink.createEl('span', { text: 'For more information, visit the ' });
        docsLink.createEl('a', {
            text: 'plugin documentation',
            href: 'https://github.com/yourusername/obsidian-spaced-repetition-pro'
        });
    }
}

class SpacedRepetitionPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.srManager = new SpacedRepetitionManager(this);
            yield this.srManager.loadData();
            this.registerView(VIEW_TYPE_SPACED_REPETITION, (leaf) => new SpacedRepetitionView(leaf, this));
            this.saveInterval = this.registerInterval(window.setInterval(() => {
                this.srManager.saveData().catch(error => {
                    console.error('Error in automatic save:', error);
                });
            }, 2 * 60 * 1000));
            this.addCommand({
                id: 'start-review-session',
                name: 'Start Review Session',
                callback: () => {
                    this.activateView();
                }
            });
            this.registerEvent(this.app.workspace.on('file-menu', (menu, file) => {
                this.addContextMenu(menu, file);
            }));
            this.registerDomEvent(document, 'keydown', (evt) => {
                const activeView = this.app.workspace.getActiveViewOfType(SpacedRepetitionView);
                if (activeView) {
                    switch (evt.key) {
                        case '1':
                            activeView.handleRating('again');
                            evt.preventDefault();
                            break;
                        case '2':
                            activeView.handleRating('hard');
                            evt.preventDefault();
                            break;
                        case '3':
                            activeView.handleRating('good');
                            evt.preventDefault();
                            break;
                        case '4':
                            activeView.handleRating('easy');
                            evt.preventDefault();
                            break;
                        case ' ':
                            activeView.handleSpacebar();
                            evt.preventDefault();
                            break;
                    }
                }
            });
            this.registerEvent(this.app.vault.on('rename', (file, oldPath) => __awaiter(this, void 0, void 0, function* () {
                if (file instanceof obsidian.TFile && this.srManager.isNoteTracked(file)) {
                    const trackedNotes = this.srManager.getTrackedNotes();
                    const item = trackedNotes.find(item => item.path === oldPath);
                    if (item) {
                        const oldFile = this.app.vault.getAbstractFileByPath(oldPath);
                        if (oldFile instanceof obsidian.TFile) {
                            this.srManager.untrackNote(oldFile);
                        }
                        item.path = file.path;
                        yield this.srManager.trackNote(file);
                    }
                }
            })));
            this.registerEvent(this.app.vault.on('delete', (file) => __awaiter(this, void 0, void 0, function* () {
                if (file instanceof obsidian.TFile && this.srManager.isNoteTracked(file)) {
                    this.srManager.untrackNote(file);
                }
            })));
            this.addSettingTab(new SpacedRepetitionSettingTab(this.app, this));
        });
    }
    onunload() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.saveInterval) {
                window.clearInterval(this.saveInterval);
            }
            if (this.srManager) {
                try {
                    yield this.srManager.saveData();
                    new obsidian.Notice('Spaced Repetition data saved successfully');
                }
                catch (error) {
                    console.error('Error saving data during unload:', error);
                    new obsidian.Notice('Error saving data before closing');
                }
            }
        });
    }
    activateView() {
        return __awaiter(this, void 0, void 0, function* () {
            const { workspace } = this.app;
            let leaf = null;
            const leaves = workspace.getLeavesOfType(VIEW_TYPE_SPACED_REPETITION);
            if (leaves.length > 0) {
                leaf = leaves[0];
            }
            else {
                leaf = workspace.getLeaf('tab');
                if (leaf) {
                    yield leaf.setViewState({
                        type: VIEW_TYPE_SPACED_REPETITION,
                        active: true,
                    });
                }
            }
            if (leaf) {
                workspace.revealLeaf(leaf);
            }
        });
    }
    addContextMenu(menu, file) {
        menu.addItem((item) => {
            item
                .setTitle('Track for Review')
                .setIcon('clock')
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                yield this.trackItems(file);
            }));
        });
        menu.addItem((item) => {
            item
                .setTitle('Untrack from Review')
                .setIcon('x')
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                yield this.untrackItems(file);
            }));
        });
    }
    trackItems(file) {
        return __awaiter(this, void 0, void 0, function* () {
            let count = 0;
            let errors = 0;
            try {
                if (file instanceof obsidian.TFile) {
                    if (file.extension === 'md') {
                        const wasAlreadyTracked = this.srManager.isNoteTracked(file);
                        if (!wasAlreadyTracked) {
                            yield this.srManager.trackNote(file);
                            count = 1;
                        }
                    }
                }
                else if (file instanceof obsidian.TFolder) {
                    const files = yield this.getMarkdownFilesInFolder(file);
                    for (const mdFile of files) {
                        const wasAlreadyTracked = this.srManager.isNoteTracked(mdFile);
                        if (!wasAlreadyTracked) {
                            try {
                                yield this.srManager.trackNote(mdFile);
                                count++;
                            }
                            catch (error) {
                                console.error(`Failed to track ${mdFile.path}:`, error);
                                errors++;
                            }
                        }
                    }
                }
                if (count > 0) {
                    const errorMsg = errors > 0 ? ` (${errors} errors)` : '';
                    new obsidian.Notice(`Added ${count} new item${count > 1 ? 's' : ''} for review${errorMsg}`, 3000);
                }
                else {
                    new obsidian.Notice('No new markdown files found to track', 3000);
                }
            }
            catch (error) {
                console.error('Error tracking items:', error);
                new obsidian.Notice('Error tracking items. Check console for details.', 5000);
            }
        });
    }
    untrackItems(file) {
        return __awaiter(this, void 0, void 0, function* () {
            let count = 0;
            if (file instanceof obsidian.TFile) {
                if (this.srManager.untrackNote(file)) {
                    count = 1;
                }
            }
            else if (file instanceof obsidian.TFolder) {
                const files = yield this.getMarkdownFilesInFolder(file);
                for (const mdFile of files) {
                    if (this.srManager.untrackNote(mdFile)) {
                        count++;
                    }
                }
            }
            if (count > 0) {
                new obsidian.Notice(`Untracked ${count} item${count > 1 ? 's' : ''}`, 3000);
            }
            else {
                new obsidian.Notice('No tracked items found to remove', 3000);
            }
        });
    }
    getMarkdownFilesInFolder(folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const files = [];
            for (const child of folder.children) {
                if (child instanceof obsidian.TFile && child.extension === 'md') {
                    files.push(child);
                }
                else if (child instanceof obsidian.TFolder) {
                    const subFiles = yield this.getMarkdownFilesInFolder(child);
                    files.push(...subFiles);
                }
            }
            return files;
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = SpacedRepetitionPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

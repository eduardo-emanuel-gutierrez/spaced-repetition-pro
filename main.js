/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source, please visit the github repository of this
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const VIEW_TYPE_SPACED_REPETITION = 'spaced-repetition-view';
/**
 * Vista principal del plugin de repeticion espaciada
 * Gestiona las diferentes sub-vistas y el flujo de repaso
 */
class SpacedRepetitionView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.currentState = 'filter';
        this.reviewQueue = [];
        this.currentReviewIndex = 0;
        this.currentFilters = [];
        this.plugin = plugin;
        this.component = new obsidian.Component();
    }
    /**
     * Retorna el tipo de vista único
     */
    getViewType() {
        return VIEW_TYPE_SPACED_REPETITION;
    }
    /**
     * Retorna el titulo mostrado en la pestaña
     */
    getDisplayText() {
        return 'Spaced Repetition';
    }
    /**
     * Retorna el icono de la vista
     */
    getIcon() {
        return 'clock';
    }
    /**
     * Metodo principal que renderiza la vista segun el estado actual
     */
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            this.renderView();
        });
    }
    /**
     * Limpieza al cerrar la vista
     */
    onClose() {
        return __awaiter(this, void 0, void 0, function* () {
            this.component.unload();
        });
    }
    /**
     * Renderiza la vista segun el estado actual
     */
    renderView() {
        return __awaiter(this, void 0, void 0, function* () {
            const container = this.containerEl.children[1];
            container.empty();
            switch (this.currentState) {
                case 'filter':
                    yield this.renderFilterView(container);
                    break;
                case 'question':
                    yield this.renderQuestionView(container);
                    break;
                case 'answer':
                    yield this.renderAnswerView(container);
                    break;
                case 'empty':
                    this.renderEmptyView(container);
                    break;
            }
        });
    }
    /**
     * Maneja la barra espaciadora para mostrar la respuesta
     */
    handleSpacebar() {
        if (this.currentState === 'question') {
            // Si estamos en la vista de pregunta, mostrar respuesta
            this.currentState = 'answer';
            this.renderView();
        }
        else if (this.currentState === 'answer') {
            // Si estamos en la vista de respuesta, calificar como "Good" por defecto
            this.handleRating('good');
        }
    }
    /**
     * Renderiza la vista de filtros
     */
    renderFilterView(container) {
        return __awaiter(this, void 0, void 0, function* () {
            // Crear contenedor principal
            const filterContainer = container.createDiv({ cls: 'sr-filter-view' });
            // Titulo
            filterContainer.createEl('h2', { text: 'Filter Review' });
            // Obtener todas las propiedades disponibles
            const allProperties = yield this.getAllProperties();
            if (allProperties.length === 0) {
                filterContainer.createEl('p', {
                    text: 'No properties found',
                    cls: 'sr-no-properties'
                });
            }
            else {
                // Controles de filtro
                const filterControls = filterContainer.createDiv({ cls: 'sr-filter-controls' });
                // Dropdown de propiedades
                const propertyDropdown = new obsidian.DropdownComponent(filterControls);
                propertyDropdown.addOption('', 'Select property');
                allProperties.forEach(prop => {
                    propertyDropdown.addOption(prop, prop);
                });
                // Dropdown de valores
                const valueDropdown = new obsidian.DropdownComponent(filterControls);
                valueDropdown.addOption('', 'Select value');
                // Actualizar valores cuando se selecciona una propiedad
                propertyDropdown.onChange((property) => __awaiter(this, void 0, void 0, function* () {
                    valueDropdown.selectEl.empty();
                    valueDropdown.addOption('', 'Select value');
                    if (property) {
                        const values = yield this.getPropertyValues(property);
                        values.forEach(value => {
                            valueDropdown.addOption(value, value);
                        });
                    }
                }));
                // Dropdown para conector (nuevo)
                let connectorDropdown = null;
                if (this.currentFilters.length > 0) {
                    const connectorContainer = filterControls.createDiv({ cls: 'sr-filter-connector-container' });
                    connectorContainer.createSpan({ text: 'Add with:', cls: 'sr-connector-label' });
                    connectorDropdown = new obsidian.DropdownComponent(connectorContainer);
                    connectorDropdown.addOption('AND', 'AND');
                    connectorDropdown.addOption('OR', 'OR');
                    connectorDropdown.setValue('AND');
                }
                // Boton agregar filtro
                new obsidian.ButtonComponent(filterControls)
                    .setButtonText('Add Filter')
                    .onClick(() => {
                    const property = propertyDropdown.getValue();
                    const value = valueDropdown.getValue();
                    const connector = connectorDropdown ? connectorDropdown.getValue() : 'AND';
                    if (property && value) {
                        this.currentFilters.push({ property, value, connector });
                        this.renderView();
                    }
                });
            }
            // Mostrar filtros actuales
            if (this.currentFilters.length > 0) {
                const filtersDisplay = filterContainer.createDiv({ cls: 'sr-current-filters' });
                filtersDisplay.createEl('h3', { text: 'Current Filters:' });
                this.currentFilters.forEach((filter, index) => {
                    const filterItem = filtersDisplay.createDiv({ cls: 'sr-filter-item' });
                    // Botón para eliminar filtro
                    const removeBtn = filterItem.createEl('button', {
                        text: '×',
                        cls: 'sr-remove-filter'
                    });
                    removeBtn.onclick = () => {
                        this.currentFilters.splice(index, 1);
                        this.renderView();
                    };
                    // Mostrar conector solo si no es el primer filtro
                    if (index === 0) {
                        filterItem.createSpan({ text: `${filter.property} = ${filter.value}` });
                    }
                    else {
                        filterItem.createSpan({
                            text: ` ${filter.connector} ${filter.property} = ${filter.value}`,
                            cls: 'sr-filter-connector-text'
                        });
                    }
                });
            }
            // Indicadores de estado
            const stats = filterContainer.createDiv({ cls: 'sr-stats' });
            const totalItems = this.plugin.srManager.getTrackedNotes().length;
            const filteredItems = yield this.getFilteredItems();
            const dailyInfo = this.plugin.srManager.getDailyLimitInfo();
            stats.createEl('p', { text: `Total items: ${totalItems}` });
            stats.createEl('p', { text: `Filtered items: ${filteredItems.length}` });
            // Mostrar información del límite diario
            if (dailyInfo.limit === -1) {
                stats.createEl('p', { text: 'Daily limit: Unlimited new cards' });
            }
            else {
                const limitText = `Daily limit: ${dailyInfo.used}/${dailyInfo.limit} new cards reviewed today`;
                const limitEl = stats.createEl('p', { text: limitText });
                // Cambiar color según el estado del límite
                if (dailyInfo.remaining === 0) {
                    limitEl.style.color = 'var(--text-error)';
                    limitEl.style.fontWeight = 'bold';
                }
                else if (dailyInfo.remaining <= 3 && dailyInfo.limit > 5) {
                    limitEl.style.color = 'var(--text-warning)';
                }
                // Mostrar cuántas nuevas quedan disponibles
                if (dailyInfo.remaining > 0) {
                    stats.createEl('p', {
                        text: `Remaining new cards today: ${dailyInfo.remaining}`,
                        cls: 'sr-remaining-cards'
                    });
                }
            }
            // Contar cuántas notas nuevas hay en la cola filtrada
            const newInFiltered = filteredItems.filter(item => item.isNew).length;
            if (newInFiltered > 0) {
                const newCardsText = `New cards in filtered results: ${newInFiltered}`;
                const newCardsEl = stats.createEl('p', { text: newCardsText });
                // Advertir si hay más notas nuevas en filtro que límite disponible
                if (dailyInfo.limit !== -1 && newInFiltered > dailyInfo.remaining) {
                    newCardsEl.style.color = 'var(--text-warning)';
                    stats.createEl('p', {
                        text: `⚠️ Only ${dailyInfo.remaining} of these new cards will be available today`,
                        cls: 'sr-warning-text'
                    });
                }
            }
            // Botones de accion
            const actions = filterContainer.createDiv({ cls: 'sr-actions' });
            new obsidian.ButtonComponent(actions)
                .setButtonText('Apply Filters')
                .setCta()
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                yield this.applyFilters();
            }));
            new obsidian.ButtonComponent(actions)
                .setButtonText('Clear Filters')
                .onClick(() => {
                this.currentFilters = [];
                this.renderView();
            });
            const startBtn = new obsidian.ButtonComponent(actions)
                .setButtonText('Start Review')
                .setCta()
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                yield this.startReview();
            }));
            if (filteredItems.length === 0 && this.currentFilters.length > 0) {
                startBtn.setDisabled(true);
                startBtn.setTooltip('No notes match the current filters');
            }
            else if (filteredItems.length === 0) {
                startBtn.setDisabled(true);
                startBtn.setTooltip('No notes due for review');
            }
        });
    }
    /**
     * Renderiza la vista de pregunta
     */
    renderQuestionView(container) {
        return __awaiter(this, void 0, void 0, function* () {
            const questionContainer = container.createDiv({ cls: 'sr-question-view' });
            if (this.reviewQueue.length === 0 || this.currentReviewIndex >= this.reviewQueue.length) {
                this.currentState = 'empty';
                this.renderView();
                return;
            }
            const currentItem = this.reviewQueue[this.currentReviewIndex];
            const file = this.app.vault.getAbstractFileByPath(currentItem.path);
            if (!file) {
                // Si el archivo no existe, pasar al siguiente
                this.currentReviewIndex++;
                this.renderView();
                return;
            }
            // Mostrar solo el titulo de la nota
            questionContainer.createEl('h1', { text: file.basename, cls: 'sr-question-title' });
            // Contenedor de botones
            const buttonsContainer = questionContainer.createDiv({ cls: 'sr-buttons' });
            // Boton Mostrar Respuesta
            new obsidian.ButtonComponent(buttonsContainer)
                .setButtonText('Show Answer')
                .setCta()
                .onClick(() => {
                this.currentState = 'answer';
                this.renderView();
            });
            // Boton Abrir Archivo
            new obsidian.ButtonComponent(buttonsContainer)
                .setButtonText('Open File')
                .setIcon('external-link')
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                yield this.app.workspace.getLeaf('tab').openFile(file);
            }));
            // Indicación del atajo de teclado
            const shortcutHint = questionContainer.createEl('p', {
                text: 'Press Spacebar to show answer',
                cls: 'sr-progress-text'
            });
            shortcutHint.style.marginTop = '20px';
            shortcutHint.style.opacity = '0.7';
            // Mostrar progreso
            const progress = questionContainer.createDiv({ cls: 'sr-progress' });
            progress.createEl('p', {
                text: `${this.currentReviewIndex + 1} / ${this.reviewQueue.length}`,
                cls: 'sr-progress-text'
            });
        });
    }
    /**
     * Renderiza la vista de respuesta
     */
    renderAnswerView(container) {
        return __awaiter(this, void 0, void 0, function* () {
            const answerContainer = container.createDiv({ cls: 'sr-answer-view' });
            if (this.reviewQueue.length === 0 || this.currentReviewIndex >= this.reviewQueue.length) {
                this.currentState = 'empty';
                this.renderView();
                return;
            }
            const currentItem = this.reviewQueue[this.currentReviewIndex];
            const file = this.app.vault.getAbstractFileByPath(currentItem.path);
            if (!file) {
                this.currentReviewIndex++;
                this.renderView();
                return;
            }
            // Titulo
            answerContainer.createEl('h1', { text: file.basename, cls: 'sr-answer-title' });
            // Contenedor para el contenido renderizado
            const contentContainer = answerContainer.createDiv({ cls: 'sr-content' });
            // Leer y renderizar el contenido del archivo como Markdown
            const content = yield this.app.vault.read(file);
            yield obsidian.MarkdownRenderer.renderMarkdown(content, contentContainer, file.path, this.component);
            // Botones de calificacion
            const ratingContainer = answerContainer.createDiv({ cls: 'sr-rating-buttons' });
            ratingContainer.createEl('h3', { text: 'How well did you remember?' });
            const buttonsRow = ratingContainer.createDiv({ cls: 'sr-buttons-row' });
            // Boton Again (1)
            new obsidian.ButtonComponent(buttonsRow)
                .setButtonText('Again (1)')
                .setClass('sr-rating-again')
                .onClick(() => this.handleRating('again'));
            // Boton Hard (2)
            new obsidian.ButtonComponent(buttonsRow)
                .setButtonText('Hard (2)')
                .setClass('sr-rating-hard')
                .onClick(() => this.handleRating('hard'));
            // Boton Good (3)
            new obsidian.ButtonComponent(buttonsRow)
                .setButtonText('Good (3)')
                .setClass('sr-rating-good')
                .onClick(() => this.handleRating('good'));
            // Boton Easy (4)
            new obsidian.ButtonComponent(buttonsRow)
                .setButtonText('Easy (4)')
                .setClass('sr-rating-easy')
                .onClick(() => this.handleRating('easy'));
            // Boton Abrir Archivo
            const actionsContainer = answerContainer.createDiv({ cls: 'sr-actions' });
            new obsidian.ButtonComponent(actionsContainer)
                .setButtonText('Open File')
                .setIcon('external-link')
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                yield this.app.workspace.getLeaf('tab').openFile(file);
            }));
            // Mostrar progreso
            const progress = answerContainer.createDiv({ cls: 'sr-progress' });
            progress.createEl('p', {
                text: `${this.currentReviewIndex + 1} / ${this.reviewQueue.length}`,
                cls: 'sr-progress-text'
            });
        });
    }
    /**
     * Renderiza la vista vacia
     */
    renderEmptyView(container) {
        const emptyContainer = container.createDiv({ cls: 'sr-empty-view' });
        // Icono grande
        const iconContainer = emptyContainer.createDiv({ cls: 'sr-empty-icon' });
        obsidian.setIcon(iconContainer, 'check-circle');
        // Mensaje
        emptyContainer.createEl('h2', { text: 'No more notes to review' });
        emptyContainer.createEl('p', {
            text: 'You have completed all notes scheduled for today. Great work!'
        });
        // Botón para volver a filtros
        const actionsContainer = emptyContainer.createDiv({ cls: 'sr-actions' });
        new obsidian.ButtonComponent(actionsContainer)
            .setButtonText('Back to Filters')
            .setCta()
            .onClick(() => {
            this.currentState = 'filter';
            this.currentFilters = [];
            this.renderView();
        });
    }
    /**
     * Maneja la calificacion de una nota
     */
    handleRating(rating) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.currentState !== 'answer') {
                return;
            }
            const currentItem = this.reviewQueue[this.currentReviewIndex];
            // Actualizar la nota con la calificación
            yield this.plugin.srManager.updateNoteReview(currentItem.path, rating);
            // Si la calificación es "again", agregar la nota de nuevo a la cola
            if (rating === 'again') {
                const reviewAgain = Object.assign({}, currentItem);
                this.reviewQueue.push(reviewAgain);
            }
            // Avanzar al siguiente ítem
            this.currentReviewIndex++;
            // VERIFICACIÓN MEJORADA DEL FLUJO
            if (this.currentReviewIndex >= this.reviewQueue.length) {
                // Terminamos la cola actual, verificar si hay más notas
                const allDueNotes = this.plugin.srManager.getDueNotes();
                const remainingDueNotes = allDueNotes.filter(note => !this.reviewQueue.some(queuedNote => queuedNote.path === note.path));
                if (remainingDueNotes.length > 0) {
                    // HAY MÁS NOTAS DISPONIBLES - Volver a Filter View
                    this.currentState = 'filter';
                    this.reviewQueue = []; // Limpiar cola actual
                    new obsidian.Notice('More notes available. Adjust filters to continue.');
                }
                else {
                    // NO HAY MÁS NOTAS - Ir a Empty View
                    this.currentState = 'empty';
                    this.reviewQueue = [];
                }
            }
            else {
                // Continuar con la siguiente pregunta
                this.currentState = 'question';
            }
            yield this.renderView();
        });
    }
    /**
     * Verifica si hay notas pendientes que no están en la cola actual
     */
    hasUntrackedDueNotes(allDueNotes) {
        if (this.reviewQueue.length === 0) {
            return allDueNotes.length > 0;
        }
        // Obtener las rutas de las notas en la cola de revisión
        const queuePaths = new Set(this.reviewQueue.map(item => item.path));
        // Verificar si hay notas pendientes que no están en nuestra cola
        return allDueNotes.some(note => !queuePaths.has(note.path));
    }
    /**
     * Obtiene todas las propiedades disponibles en las notas rastreadas
     */
    getAllProperties() {
        return __awaiter(this, void 0, void 0, function* () {
            const properties = new Set();
            const trackedNotes = this.plugin.srManager.getTrackedNotes();
            for (const note of trackedNotes) {
                const file = this.app.vault.getAbstractFileByPath(note.path);
                if (file) {
                    const cache = this.app.metadataCache.getFileCache(file);
                    if (cache === null || cache === void 0 ? void 0 : cache.frontmatter) {
                        Object.keys(cache.frontmatter).forEach(key => properties.add(key));
                    }
                }
            }
            return Array.from(properties).sort();
        });
    }
    /**
     * Obtiene los valores unicos de una propiedad especifica
     */
    getPropertyValues(property) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const values = new Set();
            const trackedNotes = this.plugin.srManager.getTrackedNotes();
            for (const note of trackedNotes) {
                const file = this.app.vault.getAbstractFileByPath(note.path);
                if (file) {
                    const cache = this.app.metadataCache.getFileCache(file);
                    if ((_a = cache === null || cache === void 0 ? void 0 : cache.frontmatter) === null || _a === void 0 ? void 0 : _a[property]) {
                        const value = cache.frontmatter[property];
                        if (Array.isArray(value)) {
                            // Si es array, agregar todos los valores
                            value.forEach(v => {
                                if (v !== undefined && v !== null) {
                                    values.add(String(v));
                                }
                            });
                        }
                        else if (typeof value === 'string' || typeof value === 'number') {
                            // Si es valor simple
                            values.add(String(value));
                        }
                    }
                }
            }
            return Array.from(values).sort();
        });
    }
    /**
     * Obtiene los items filtrados segun los filtros actuales
     */
    getFilteredItems() {
        return __awaiter(this, void 0, void 0, function* () {
            let items = this.plugin.srManager.getDueNotes();
            if (this.currentFilters.length === 0) {
                return items;
            }
            const filteredItems = [];
            for (const item of items) {
                const file = this.app.vault.getAbstractFileByPath(item.path);
                if (!file)
                    continue;
                const cache = this.app.metadataCache.getFileCache(file);
                if (!(cache === null || cache === void 0 ? void 0 : cache.frontmatter))
                    continue;
                let currentResult = true;
                for (let i = 0; i < this.currentFilters.length; i++) {
                    const filter = this.currentFilters[i];
                    const propValue = cache.frontmatter[filter.property];
                    // Manejar arrays y valores simples
                    let matches = false;
                    if (Array.isArray(propValue)) {
                        // Si es un array, verificar si contiene el valor
                        matches = propValue.includes(filter.value);
                    }
                    else if (propValue !== undefined && propValue !== null) {
                        // Si es un valor simple, comparar
                        matches = String(propValue) === filter.value;
                    }
                    if (i === 0) {
                        currentResult = matches;
                    }
                    else {
                        if (filter.connector === 'AND') {
                            currentResult = currentResult && matches;
                        }
                        else {
                            currentResult = currentResult || matches;
                        }
                    }
                    // Si estamos en AND y ya falló, podemos terminar temprano
                    if (filter.connector === 'AND' && !currentResult) {
                        break;
                    }
                }
                if (currentResult) {
                    filteredItems.push(item);
                }
            }
            return filteredItems;
        });
    }
    /**
     * Aplica los filtros actuales
     */
    applyFilters() {
        return __awaiter(this, void 0, void 0, function* () {
            this.reviewQueue = yield this.getFilteredItems();
            if (this.reviewQueue.length === 0) {
                new obsidian.Notice('No notes match the current filters', 3000);
            }
            else {
                new obsidian.Notice(`Filtered to ${this.reviewQueue.length} items`);
            }
        });
    }
    /**
     * Inicia la sesion de repaso
     */
    startReview() {
        return __awaiter(this, void 0, void 0, function* () {
            // Si no se han aplicado filtros, usar todas las notas vencidas
            if (this.reviewQueue.length === 0) {
                this.reviewQueue = this.plugin.srManager.getDueNotes();
            }
            if (this.reviewQueue.length === 0) {
                if (this.currentFilters.length > 0) {
                    new obsidian.Notice('No notes match the applied filters. Clear filters or adjust criteria', 4000);
                }
                else {
                    new obsidian.Notice('No notes due for review', 3000);
                }
                this.currentState = 'empty';
            }
            else {
                this.currentReviewIndex = 0;
                this.currentState = 'question';
                new obsidian.Notice(`Starting review session with ${this.reviewQueue.length} notes`);
            }
            yield this.renderView();
        });
    }
}

/**
 * Gestor del algoritmo de repetición espaciada (SM-2)
 * Maneja la lógica de seguimiento y cálculo de intervalos
 */
class SpacedRepetitionManager {
    constructor(plugin) {
        this.reviewItems = new Map();
        this.lastResetDate = '';
        this.newCardsReviewedToday = 0;
        this.plugin = plugin;
        this.dataFilePath = this.plugin.settings.dataLocation || 'spaced-repetition-data.json';
    }
    /**
     * Inicializa los datos diarios
     */
    initializeDailyData() {
        const today = new Date().toDateString();
        this.lastResetDate = today;
        this.newCardsReviewedToday = 0; // CAMBIO: reviewed en lugar de added
    }
    /**
     * Verifica si necesitamos resetear el contador diario
     */
    checkDailyReset() {
        const today = new Date().toDateString();
        if (this.lastResetDate !== today) {
            console.log(`New day detected. Resetting new cards counter. Previous: ${this.newCardsReviewedToday}`);
            this.lastResetDate = today;
            this.newCardsReviewedToday = 0; // CAMBIO: reviewed en lugar de added
        }
    }
    /**
     * Carga los datos desde el archivo JSON
     */
    loadData() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const adapter = this.plugin.app.vault.adapter;
                if (yield adapter.exists(this.dataFilePath)) {
                    const content = yield adapter.read(this.dataFilePath);
                    if (content && content.trim()) {
                        const data = JSON.parse(content);
                        // Cargar items en el mapa
                        this.reviewItems.clear();
                        for (const item of data.items || []) {
                            this.reviewItems.set(item.path, item);
                        }
                        // Cargar datos diarios
                        this.lastResetDate = data.lastResetDate || '';
                        this.newCardsReviewedToday = data.newCardsReviewedToday || 0; // CAMBIO
                        // Verificar si necesitamos resetear el contador diario
                        this.checkDailyReset();
                        console.log(`Loaded ${this.reviewItems.size} review items`);
                    }
                    else {
                        this.reviewItems.clear();
                        this.initializeDailyData();
                        yield this.saveData();
                    }
                }
                else {
                    this.reviewItems.clear();
                    this.initializeDailyData();
                    yield this.saveData();
                    console.log('Created new spaced repetition data file');
                }
            }
            catch (error) {
                console.error('Error loading spaced repetition data:', error);
                this.reviewItems.clear();
                this.initializeDailyData();
                try {
                    yield this.saveData();
                }
                catch (saveError) {
                    console.error('Error creating data file:', saveError);
                }
            }
        });
    }
    /**
     * Guarda los datos en el archivo JSON
     */
    saveData() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = {
                    version: 1,
                    items: Array.from(this.reviewItems.values()),
                    lastResetDate: this.lastResetDate,
                    newCardsReviewedToday: this.newCardsReviewedToday // CAMBIO
                };
                const jsonContent = JSON.stringify(data, null, 2);
                const adapter = this.plugin.app.vault.adapter;
                yield adapter.write(this.dataFilePath, jsonContent);
                console.log(`Saved ${this.reviewItems.size} review items to ${this.dataFilePath}`);
            }
            catch (error) {
                console.error('Error saving spaced repetition data:', error);
                throw error;
            }
        });
    }
    /**
     * Verifica si una nota ya está siendo rastreada
     */
    isNoteTracked(file) {
        return this.reviewItems.has(file.path);
    }
    /**
     * Agrega una nota para rastrear
     */
    trackNote(file) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.reviewItems.has(file.path)) {
                // La nota ya está siendo rastreada
                return;
            }
            const now = Date.now();
            const newItem = {
                path: file.path,
                interval: 1,
                easeFactor: 2.5,
                repetitions: 0,
                nextReviewDate: now,
                isNew: true // Marcar como nueva
            };
            this.reviewItems.set(file.path, newItem);
            // CRÍTICO: Guardar inmediatamente después de agregar
            try {
                yield this.saveData();
                console.log(`Successfully tracked note: ${file.path}`);
            }
            catch (error) {
                // Si falla el guardado, remover el item para mantener consistencia
                this.reviewItems.delete(file.path);
                console.error(`Failed to track note ${file.path}:`, error);
                throw error;
            }
        });
    }
    /**
     * Elimina una nota del rastreo
     */
    untrackNote(file) {
        const wasTracked = this.reviewItems.delete(file.path);
        if (wasTracked) {
            // CRÍTICO: Guardar inmediatamente después de eliminar
            this.saveData().then(() => {
                console.log(`Successfully untracked note: ${file.path}`);
            }).catch((error) => {
                console.error(`Failed to save after untracking ${file.path}:`, error);
                // Re-agregar el item si falla el guardado (rollback)
                // Nota: Esto requeriría mantener una copia del item eliminado
            });
        }
        return wasTracked;
    }
    /**
     * Obtiene todas las notas rastreadas
     */
    getTrackedNotes() {
        return Array.from(this.reviewItems.values());
    }
    /**
     * Obtiene las notas que deben ser revisadas
     */
    getDueNotes() {
        this.checkDailyReset();
        const now = Date.now();
        const maxNewPerDay = this.plugin.settings.newCardsPerDay;
        console.log(`Daily limit check: ${this.newCardsReviewedToday}/${maxNewPerDay} new cards reviewed today`);
        const dueItems = [];
        let newCardsInQueue = 0;
        for (const item of this.reviewItems.values()) {
            if (item.isNew) {
                // CORRECCIÓN: Solo verificar el límite, NO incrementar contador
                if (maxNewPerDay === -1 || this.newCardsReviewedToday + newCardsInQueue < maxNewPerDay) {
                    dueItems.push(item);
                    newCardsInQueue++; // Contar para este ciclo solamente
                    console.log(`New card queued. Total new in queue: ${newCardsInQueue}, Already reviewed today: ${this.newCardsReviewedToday}`);
                }
                else {
                    console.log(`Skipping new card due to daily limit: ${this.newCardsReviewedToday + newCardsInQueue}/${maxNewPerDay}`);
                }
            }
            else {
                // Para notas existentes, verificar si están vencidas
                if (item.nextReviewDate <= now) {
                    dueItems.push(item);
                }
            }
        }
        return dueItems.sort((a, b) => {
            // Priorizar notas con intervalos más cortos
            if (a.interval !== b.interval) {
                return a.interval - b.interval;
            }
            // Luego por fecha de revisión
            return a.nextReviewDate - b.nextReviewDate;
        });
    }
    /**
     * Actualiza una nota después de la revisión usando el algoritmo SM-2
     */
    updateNoteReview(path, rating) {
        return __awaiter(this, void 0, void 0, function* () {
            const item = this.reviewItems.get(path);
            if (!item)
                return;
            // CRÍTICO: Verificar si es la primera vez que se revisa una nota nueva
            const wasNewCard = item.isNew;
            // Convertir rating a valor numérico (0-5)
            const qualityMap = {
                'again': 0,
                'hard': 2,
                'good': 3,
                'easy': 5 // Respuesta perfecta
            };
            const quality = qualityMap[rating];
            // Aplicar algoritmo SM-2
            const result = this.calculateSM2(quality, item.repetitions, item.easeFactor, item.interval);
            // Actualizar el item
            const now = Date.now();
            item.easeFactor = result.easeFactor;
            item.repetitions = result.repetitions;
            item.interval = result.interval;
            item.lastReviewDate = now;
            item.nextReviewDate = now + (result.interval * 24 * 60 * 60 * 1000);
            item.isNew = false; // Ya no es nueva después de la primera revisión
            // NUEVO: Incrementar contador SOLO si era una carta nueva
            if (wasNewCard) {
                this.checkDailyReset(); // Asegurar que estamos en el día correcto
                this.newCardsReviewedToday++;
                console.log(`New card reviewed! Count now: ${this.newCardsReviewedToday}/${this.plugin.settings.newCardsPerDay}`);
            }
            // Si la calificación fue "again", resetear para revisión inmediata
            if (rating === 'again') {
                item.repetitions = 0;
                item.interval = 0.0104; // ~15 minutos
                item.nextReviewDate = now + (15 * 60 * 1000);
            }
            // Guardar cambios inmediatamente
            try {
                yield this.saveData();
                console.log(`Successfully updated review for: ${path}`);
            }
            catch (error) {
                console.error(`Failed to save review update for ${path}:`, error);
                throw error;
            }
        });
    }
    /**
     * Obtiene información sobre el límite diario
     */
    getDailyLimitInfo() {
        this.checkDailyReset();
        const limit = this.plugin.settings.newCardsPerDay;
        const remaining = limit === -1 ? -1 : Math.max(0, limit - this.newCardsReviewedToday);
        return {
            used: this.newCardsReviewedToday,
            limit: limit,
            remaining: remaining
        };
    }
    /**
     * Implementación del algoritmo SM-2 (SuperMemo 2)
     */
    calculateSM2(quality, repetitions, easeFactor, interval) {
        // Si la calidad es menor a 3, reiniciar
        if (quality < 3) {
            return {
                interval: 1,
                repetitions: 0,
                easeFactor: easeFactor
            };
        }
        // Calcular nuevo factor de facilidad
        // EF' = EF + (0.1 - (5 - q) * (0.08 + (5 - q) * 0.02))
        let newEaseFactor = easeFactor + (0.1 - (5 - quality) * (0.08 + (5 - quality) * 0.02));
        // El factor de facilidad no debe ser menor a 1.3
        if (newEaseFactor < 1.3) {
            newEaseFactor = 1.3;
        }
        // Incrementar repeticiones exitosas
        const newRepetitions = repetitions + 1;
        // Calcular nuevo intervalo
        let newInterval;
        if (newRepetitions === 1) {
            // Primera repetición exitosa: 1 día
            newInterval = 1;
        }
        else if (newRepetitions === 2) {
            // Segunda repetición exitosa: 6 días
            newInterval = 6;
        }
        else {
            // Repeticiones subsecuentes: intervalo anterior * factor de facilidad
            newInterval = interval * newEaseFactor;
        }
        // Aplicar modificadores basados en la calidad
        if (quality === 5) {
            // Easy: multiplicar intervalo por 1.3
            newInterval *= 1.3;
        }
        else if (quality === 2) {
            // Hard: multiplicar intervalo por 0.6
            newInterval *= 0.6;
        }
        // Asegurar que el intervalo sea al menos 1 día
        if (newInterval < 1) {
            newInterval = 1;
        }
        // Limitar el intervalo máximo a 365 días
        if (newInterval > 365) {
            newInterval = 365;
        }
        return {
            interval: Math.round(newInterval * 100) / 100,
            repetitions: newRepetitions,
            easeFactor: Math.round(newEaseFactor * 100) / 100 // Redondear a 2 decimales
        };
    }
    /**
     * Obtiene estadísticas de las notas rastreadas
     */
    getStatistics() {
        const now = Date.now();
        let due = 0;
        let newCards = 0;
        let learning = 0;
        let review = 0;
        for (const item of this.reviewItems.values()) {
            if (item.isNew) {
                newCards++;
            }
            else if (item.repetitions === 0 || item.interval < 1) {
                learning++;
            }
            else {
                review++;
            }
            if (item.nextReviewDate <= now) {
                due++;
            }
        }
        return {
            total: this.reviewItems.size,
            due,
            new: newCards,
            learning,
            review
        };
    }
    /**
     * Limpia las notas que ya no existen en el vault
     */
    cleanupDeletedNotes() {
        return __awaiter(this, void 0, void 0, function* () {
            let cleaned = 0;
            const adapter = this.plugin.app.vault.adapter;
            // Crear una lista de paths a eliminar para evitar modificar el Map durante la iteración
            const pathsToDelete = [];
            for (const [path, _] of this.reviewItems) {
                try {
                    const exists = yield adapter.exists(path);
                    if (!exists) {
                        pathsToDelete.push(path);
                    }
                }
                catch (error) {
                    console.error(`Error checking existence of ${path}:`, error);
                    // Si hay error al verificar, asumir que no existe
                    pathsToDelete.push(path);
                }
            }
            // Eliminar los paths que no existen
            for (const path of pathsToDelete) {
                this.reviewItems.delete(path);
                cleaned++;
            }
            // Guardar cambios si se eliminaron items
            if (cleaned > 0) {
                try {
                    yield this.saveData();
                    console.log(`Cleaned up ${cleaned} deleted notes`);
                }
                catch (error) {
                    console.error('Error saving after cleanup:', error);
                    throw error;
                }
            }
            return cleaned;
        });
    }
}

/**
 * Configuracion por defecto
 */
const DEFAULT_SETTINGS = {
    newCardsPerDay: 20,
    dataLocation: 'spaced-repetition-data.json'
};
/**
 * Pestaña de configuracion del plugin
 * Permite al usuario personalizar el comportamiento del plugin
 */
class SpacedRepetitionSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    /**
     * Muestra la pestaña de configuracion
     */
    display() {
        const { containerEl } = this;
        // Limpiar el contenedor
        containerEl.empty();
        // Titulo de la configuracion
        containerEl.createEl('h2', { text: 'Spaced Repetition Pro Settings' });
        // Descripcion general
        containerEl.createEl('p', {
            text: 'Configure your spaced repetition learning preferences.',
            cls: 'setting-item-description'
        });
        // Configuración: Numero de notas nuevas por dia
        new obsidian.Setting(containerEl)
            .setName('New cards per day')
            .setDesc('Maximum number of new notes to introduce per day (1-1000).')
            .addText(text => text
            .setPlaceholder('20')
            .setValue(String(this.plugin.settings.newCardsPerDay))
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            const num = parseInt(value);
            if (!isNaN(num) && num > 0 && num <= 1000) {
                this.plugin.settings.newCardsPerDay = num;
                yield this.plugin.saveSettings();
            }
            else {
                // Mostrar error temporal
                text.inputEl.style.borderColor = 'var(--background-modifier-error)';
                setTimeout(() => {
                    text.inputEl.style.borderColor = '';
                }, 2000);
            }
        })));
        // Configuración: Ubicacion del archivo de datos
        new obsidian.Setting(containerEl)
            .setName('Data file location')
            .setDesc('Path to the JSON file where review data is stored. Must end with .json')
            .addText(text => text
            .setPlaceholder('spaced-repetition-data.json')
            .setValue(this.plugin.settings.dataLocation)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            if (value.endsWith('.json') && !value.includes('..') && !value.startsWith('/')) {
                this.plugin.settings.dataLocation = value;
                yield this.plugin.saveSettings();
                this.plugin.srManager.loadData();
            }
            else {
                text.inputEl.style.borderColor = 'var(--background-modifier-error)';
                setTimeout(() => {
                    text.inputEl.style.borderColor = '';
                }, 2000);
            }
        })));
        // Seccion de estadisticas
        containerEl.createEl('h3', { text: 'Statistics' });
        const statsContainer = containerEl.createDiv({ cls: 'sr-stats-container' });
        // Obtener estadisticas del gestor
        const stats = this.plugin.srManager.getStatistics();
        // Mostrar estadisticas
        new obsidian.Setting(statsContainer)
            .setName('Total tracked notes')
            .setDesc(`${stats.total} notes are currently being tracked for review`);
        new obsidian.Setting(statsContainer)
            .setName('Due for review')
            .setDesc(`${stats.due} notes are due for review right now`);
        new obsidian.Setting(statsContainer)
            .setName('New notes')
            .setDesc(`${stats.new} notes haven't been reviewed yet`);
        new obsidian.Setting(statsContainer)
            .setName('Learning notes')
            .setDesc(`${stats.learning} notes are in the learning phase`);
        new obsidian.Setting(statsContainer)
            .setName('Review notes')
            .setDesc(`${stats.review} notes are in the long-term review phase`);
        // Seccion de mantenimiento
        containerEl.createEl('h3', { text: 'Maintenance' });
        // Boton para limpiar notas eliminadas
        new obsidian.Setting(containerEl)
            .setName('Clean up deleted notes')
            .setDesc('Remove tracked notes that no longer exist in your vault')
            .addButton(button => button
            .setButtonText('Clean up')
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            const cleaned = yield this.plugin.srManager.cleanupDeletedNotes();
            if (cleaned > 0) {
                // Actualizar la vista
                this.display();
                // Mostrar notificacion
                const { Notice } = require('obsidian');
                new Notice(`Cleaned up ${cleaned} deleted note${cleaned > 1 ? 's' : ''}`);
            }
            else {
                const { Notice } = require('obsidian');
                new Notice('No deleted notes found');
            }
        })));
        // Informacion sobre atajos de teclado
        containerEl.createEl('h3', { text: 'Keyboard Shortcuts' });
        const shortcutsInfo = containerEl.createDiv({ cls: 'sr-shortcuts-info' });
        shortcutsInfo.createEl('p', { text: 'During review sessions, you can use these shortcuts:' });
        const shortcutsList = shortcutsInfo.createEl('ul');
        shortcutsList.createEl('li', { text: 'Spacebar - Show answer / Mark as "Good"' });
        shortcutsList.createEl('li', { text: '1 - Rate as "Again" (forgot completely)' });
        shortcutsList.createEl('li', { text: '2 - Rate as "Hard" (difficult but remembered)' });
        shortcutsList.createEl('li', { text: '3 - Rate as "Good" (remembered with effort)' });
        shortcutsList.createEl('li', { text: '4 - Rate as "Easy" (remembered perfectly)' });
        // Informacion adicional
        containerEl.createEl('h3', { text: 'About' });
        const aboutContainer = containerEl.createDiv({ cls: 'sr-about' });
        aboutContainer.createEl('p', {
            text: 'Spaced Repetition Pro uses the SM-2 algorithm (SuperMemo 2) to calculate optimal review intervals for your notes.'
        });
        aboutContainer.createEl('p', {
            text: 'The algorithm adapts to your performance, showing difficult notes more frequently and easy ones less often.'
        });
        // Link a documentacion (opcional)
        const docsLink = aboutContainer.createEl('p');
        docsLink.createEl('span', { text: 'For more information, visit the ' });
        docsLink.createEl('a', {
            text: 'plugin documentation',
            href: 'https://github.com/yourusername/obsidian-spaced-repetition-pro'
        });
    }
}

/**
 * Plugin principal de Spaced Repetition Pro
 * Gestiona la inicializacion, comandos y menus contextuales
 */
class SpacedRepetitionPlugin extends obsidian.Plugin {
    /**
     * Metodo llamado cuando el plugin se carga
     */
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Loading Spaced Repetition Pro plugin');
            // Cargar configuracion
            yield this.loadSettings();
            // Inicializar el gestor de repeticion espaciada
            this.srManager = new SpacedRepetitionManager(this);
            yield this.srManager.loadData();
            // Registrar la vista personalizada
            this.registerView(VIEW_TYPE_SPACED_REPETITION, (leaf) => new SpacedRepetitionView(leaf, this));
            // Configurar guardado automático más frecuente
            this.saveInterval = this.registerInterval(window.setInterval(() => {
                this.srManager.saveData().catch(error => {
                    console.error('Error in automatic save:', error);
                });
            }, 2 * 60 * 1000) // Cada 2 minutos en lugar de 5
            );
            // Registrar el comando principal para iniciar sesion de repaso
            this.addCommand({
                id: 'start-review-session',
                name: 'Start Review Session',
                callback: () => {
                    this.activateView();
                }
            });
            // Registrar menu contextual para archivos
            this.registerEvent(this.app.workspace.on('file-menu', (menu, file) => {
                this.addContextMenu(menu, file);
            }));
            // Registrar atajos de teclado globales para calificacion
            this.registerDomEvent(document, 'keydown', (evt) => {
                // Solo procesar si la vista activa es la nuestra
                const activeView = this.app.workspace.getActiveViewOfType(SpacedRepetitionView);
                if (activeView) {
                    switch (evt.key) {
                        case '1':
                            activeView.handleRating('again');
                            evt.preventDefault();
                            break;
                        case '2':
                            activeView.handleRating('hard');
                            evt.preventDefault();
                            break;
                        case '3':
                            activeView.handleRating('good');
                            evt.preventDefault();
                            break;
                        case '4':
                            activeView.handleRating('easy');
                            evt.preventDefault();
                            break;
                        case ' ': // Barra espaciadora
                            activeView.handleSpacebar();
                            evt.preventDefault();
                            break;
                    }
                }
            });
            // Agregar eventos para guardar cuando se renombran o eliminan archivos
            this.registerEvent(this.app.vault.on('rename', (file, oldPath) => __awaiter(this, void 0, void 0, function* () {
                if (file instanceof obsidian.TFile && this.srManager.isNoteTracked(file)) {
                    // Actualizar el path en los datos de revisión
                    const trackedNotes = this.srManager.getTrackedNotes();
                    const item = trackedNotes.find(item => item.path === oldPath);
                    if (item) {
                        // Remover el item antiguo y agregar el nuevo con el path actualizado
                        this.srManager.untrackNote({ path: oldPath });
                        item.path = file.path;
                        yield this.srManager.trackNote(file);
                        console.log(`Updated tracking path: ${oldPath} -> ${file.path}`);
                    }
                }
            })));
            this.registerEvent(this.app.vault.on('delete', (file) => __awaiter(this, void 0, void 0, function* () {
                if (file instanceof obsidian.TFile && this.srManager.isNoteTracked(file)) {
                    this.srManager.untrackNote(file);
                    console.log(`Untracked deleted file: ${file.path}`);
                }
            })));
            // Agregar pestaña de configuracion
            this.addSettingTab(new SpacedRepetitionSettingTab(this.app, this));
        });
    }
    /**
     * Metodo llamado cuando el plugin se descarga
     */
    onunload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Unloading Spaced Repetition Pro plugin');
            // Limpiar intervalo de guardado
            if (this.saveInterval) {
                window.clearInterval(this.saveInterval);
            }
            // CRÍTICO: Guardar datos antes de cerrar
            if (this.srManager) {
                try {
                    yield this.srManager.saveData();
                    console.log('Successfully saved data before unloading');
                }
                catch (error) {
                    console.error('Error saving data during unload:', error);
                }
            }
        });
    }
    /**
     * Activa la vista del plugin en una nueva pestaña
     */
    activateView() {
        return __awaiter(this, void 0, void 0, function* () {
            const { workspace } = this.app;
            let leaf = null;
            const leaves = workspace.getLeavesOfType(VIEW_TYPE_SPACED_REPETITION);
            if (leaves.length > 0) {
                // Si ya existe una vista, enfocarla
                leaf = leaves[0];
            }
            else {
                // Crear nueva pestaña
                leaf = workspace.getLeaf('tab');
                if (leaf) {
                    yield leaf.setViewState({
                        type: VIEW_TYPE_SPACED_REPETITION,
                        active: true,
                    });
                }
            }
            // Enfocar la pestaña
            if (leaf) {
                workspace.revealLeaf(leaf);
            }
        });
    }
    /**
     * Agrega opciones al menu contextual para archivos y carpetas
     */
    addContextMenu(menu, file) {
        // Opcion para rastrear
        menu.addItem((item) => {
            item
                .setTitle('Track for Review')
                .setIcon('clock')
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                yield this.trackItems(file);
            }));
        });
        // Opcion para dejar de rastrear
        menu.addItem((item) => {
            item
                .setTitle('Untrack from Review')
                .setIcon('x')
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                yield this.untrackItems(file);
            }));
        });
    }
    /**
     * Rastrea archivos o carpetas para repaso
     */
    trackItems(file) {
        return __awaiter(this, void 0, void 0, function* () {
            let count = 0;
            let errors = 0;
            try {
                if (file instanceof obsidian.TFile) {
                    // Si es un archivo, rastrearlo directamente
                    if (file.extension === 'md') {
                        const wasAlreadyTracked = this.srManager.isNoteTracked(file);
                        if (!wasAlreadyTracked) {
                            yield this.srManager.trackNote(file);
                            count = 1;
                        }
                    }
                }
                else if (file instanceof obsidian.TFolder) {
                    // Si es una carpeta, rastrear todos los archivos .md dentro
                    const files = yield this.getMarkdownFilesInFolder(file);
                    for (const mdFile of files) {
                        const wasAlreadyTracked = this.srManager.isNoteTracked(mdFile);
                        if (!wasAlreadyTracked) {
                            try {
                                yield this.srManager.trackNote(mdFile);
                                count++;
                            }
                            catch (error) {
                                console.error(`Failed to track ${mdFile.path}:`, error);
                                errors++;
                            }
                        }
                    }
                }
                // Mostrar notificación
                if (count > 0) {
                    const errorMsg = errors > 0 ? ` (${errors} errors)` : '';
                    new obsidian.Notice(`Added ${count} new item${count > 1 ? 's' : ''} for review${errorMsg}`, 3000);
                }
                else {
                    new obsidian.Notice('No new markdown files found to track', 3000);
                }
            }
            catch (error) {
                console.error('Error tracking items:', error);
                new obsidian.Notice('Error tracking items. Check console for details.', 5000);
            }
        });
    }
    /**
     * Deja de rastrear archivos o carpetas
     */
    untrackItems(file) {
        return __awaiter(this, void 0, void 0, function* () {
            let count = 0;
            if (file instanceof obsidian.TFile) {
                // Si es un archivo, dejar de rastrearlo
                if (this.srManager.untrackNote(file)) {
                    count = 1;
                }
            }
            else if (file instanceof obsidian.TFolder) {
                // Si es una carpeta, dejar de rastrear todos los archivos dentro
                const files = yield this.getMarkdownFilesInFolder(file);
                for (const mdFile of files) {
                    if (this.srManager.untrackNote(mdFile)) {
                        count++;
                    }
                }
            }
            // Mostrar notificacion
            if (count > 0) {
                new obsidian.Notice(`Untracked ${count} item${count > 1 ? 's' : ''}`, 3000);
            }
            else {
                new obsidian.Notice('No tracked items found to remove', 3000);
            }
        });
    }
    /**
     * Obtiene todos los archivos markdown dentro de una carpeta (recursivamente)
     */
    getMarkdownFilesInFolder(folder) {
        return __awaiter(this, void 0, void 0, function* () {
            const files = [];
            for (const child of folder.children) {
                if (child instanceof obsidian.TFile && child.extension === 'md') {
                    files.push(child);
                }
                else if (child instanceof obsidian.TFolder) {
                    // Recursivamente buscar en subcarpetas
                    const subFiles = yield this.getMarkdownFilesInFolder(child);
                    files.push(...subFiles);
                }
            }
            return files;
        });
    }
    /**
     * Carga la configuracion del plugin
     */
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    /**
     * Guarda la configuracion del plugin
     */
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = SpacedRepetitionPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
